// 题目
/*
C++如何进行内存分配
*/

// 解答
/*
32bitCPU可寻址4G线性空间，每个进程都有各自独立的4G逻辑地址，其中0~3G是用户态空间，3~4G是内核空间，
不同进程相同的逻辑地址会映射到不同的物理地址中。

各个段说明如下：

3G用户空间和1G内核空间

静态区域：

    text segment(代码段):包括只读存储区和文本区，其中只读存储区存储字符串常量，文本区存储程序的机器代码。

    data segment(数据段)：存储程序中已初始化的全局变量和静态变量

    bss segment：存储未初始化的全局变量和静态变量（局部+全局），以及所有被初始化为0的全局变量和静态变量，对于未初始化的全局变量和静态变量，程序运行main之前时会统一清零。即未初始化的全局变量编译器会初始化为0

动态区域：

    heap（堆）： 当进程未调用malloc时是没有堆段的，只有调用malloc时采用分配一个堆，
                并且在程序运行过程中可以动态增加堆大小(移动break指针)，从低地址向高地址增长，分配小内存时使用该区域。  
                堆的起始地址由mm_struct 结构体中的start_brk标识，结束地址由brk标识。

    memory mapping segment(映射区):存储动态链接库等文件映射、申请大内存（malloc时调用mmap函数）

    stack（栈）：使用栈空间存储函数的返回地址、参数、局部变量、返回值，从高地址向低地址增长。
                在创建进程时会有一个最大栈大小，Linux可以通过ulimit命令指定。
*/