// 题目
/*
如何保证单例模式只有唯一实例？你知道的都有哪些方法？
*/

// 解答
/*
常见的设计模式如下：
单例模式：
    单例模式主要解决一个全局使用的类频繁的创建和销毁的问题。
    单例模式下可以确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。
    单例模式有三个要素：
        一是某个类只能有一个实例；
        二是它必须自行创建这个实例；
        三是它必须自行向整个系统提供这个实例。

单例的实现主要是通过以下两个步骤：
    1.将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，
    只有通过该类提供的静态方法来得到该类的唯一实例；
    2.在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，
    如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。


在单例模式的实现中，如果不采取任何措施，在多线程下是不安全的，可能会同时创建多个实例。
因此，为了保证单例模式在多线程下的线程安全，一般采用下面几种方式实现单例模式：

1)饿汉式：基于class loader机制避免多线程的同步问题，不过，instance在类装载时就实例化，可能会产生垃圾对象。

2)懒汉式：通过双重锁机制实现线程安全。

*/