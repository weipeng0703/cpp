/*
C++程序在执行时，将内存大方向划分为4个区域

1.代码区：存放函数体的  二进制代码，由  操作系统  进行管理的
2.全局区：存放全局变量和静态变量以及常量
3.栈区：由  编译器  自动分配释放, 存放函数的参数值,局部变量等
4.堆区：由  程序员  分配和释放,若程序员不释放,程序结束时由操作系统回收

内存四区意义：
不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程

​
1.程序运行前：
在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域——代码区和全局区

    ​1.代码区：

    ​   存放 CPU 执行的机器指令（即我们写的代码的二进制形式）

    特点：

    ​   代码区是 共享 的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可

    ​   代码区是 只读 的，使其只读的原因是防止程序意外地修改了它的指令

    2.全局区：

    ​   全局变量 和 静态变量 存放在此.

    ​   全局区还包含了常量区（const修饰的变量）, 字符串常量和其他常量也存放在此.

    ​   该区域的数据在程序结束后由 操作系统 释放.
*/

#include<string>
#include<iostream>
using namespace std;

// 全局变量，没写进函数体main内的变量
int g_a = 10, g_b = 10;

// const修饰的全局变量——全局常量
const int c_g_a = 10;
const int c_g_b = 10;


int main()
{
    // 创建普通局部变量
    int a = 10, b = 10;

    cout << "局部变量a的地址为：" << &a << endl;
    cout << "局部变量b的地址为：" << &b << endl;

    cout << "全局变量g_a的地址为：" << &g_a << endl;
    cout << "全局变量g_b的地址为：" << &g_b << endl;

    // 静态变量
    static int s_a = 10;
    static int s_b = 10;

    cout << "静态变量s_a的地址为：" << &s_a << endl;
    cout << "静态变量s_b的地址为：" << &s_b << endl;

    // 常量
    // 1.字符串常量
    cout << "字符串常量的地址为：" << &"hello world!" << endl;
    // 2.const修饰的常量

    // const修饰的全局变量
    cout << "全局常量c_g_a的地址为：" << &c_g_a << endl;
    cout << "全局常量c_g_b的地址为：" << &c_g_b << endl;

    // const修饰的局部变量
    const int c_l_a = 10;
    const int c_l_b = 10;
    cout << "局部常量c_l_a的地址为：" << &c_l_a << endl;
    cout << "局部常量c_l_b的地址为：" << &c_l_b << endl;
    
    return 0;
}