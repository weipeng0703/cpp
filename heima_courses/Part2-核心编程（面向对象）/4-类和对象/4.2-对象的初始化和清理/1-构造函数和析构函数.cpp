/*
生活示例：
    生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全
    C++中的面向对象来源于生活，每个对象也都会有初始设置以及对象销毁前的清理数据的设置。

对象的初始化和清理也是两个非常重要的安全问题：
    一个对象或者变量没有初始状态，对其使用后果是未知；
    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题

析构函数和构造函数：
    c++利用了 构造函数 和 析构函数 解决上述问题，这两个函数将会被编译器自动调用，
    完成对象初始化和清理工作。
    对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，
    编译器会提供，但是编译器提供的构造函数和析构函数是空实现。

构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，
         无须手动调用。
析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。

构造函数语法：类名(){}
    构造函数，没有返回值也不写void
    函数名称与类名相同
    构造函数可以有参数，因此可以发生重载
    程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次

析构函数语法： ~类名(){}
    析构函数，没有返回值也不写void
    函数名称与类名相同,在名称前加上符号 ~
    析构函数不可以有参数，因此不可以发生重载
    程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次

*/
#include<iostream>
#include<string>
using namespace std;

class Person
{
public:
    // 1.构造函数进行初始化操作
    Person()
    {
        cout << "Person 构造函数的调用" << endl;
    }

    // 2.析构函数进行清理的操作
    ~Person()
    {
        cout << "Person 析构函数的调用" << endl;
    }
};

// 构造和析构都是必须有的实现，如果我们不实现，编译器会提供一个空实现的构造和析构

void test1()
{
    Person p;   // 栈上的数据，test1()执行完毕后，释放这个对象

}


int main()
{
    // 如果将Person p写在函数中，那么程序会在main函数中完整运行完test1函数，
    // 所以有完整的创建与销毁过程
    // test1();

    // 但是将Person p放在main函数中，只会实现构造函数，按完一个键结束，程序结束才会调用析构函数将其销毁
    Person p;
    
    
    system("pause");    

    return 0;
}