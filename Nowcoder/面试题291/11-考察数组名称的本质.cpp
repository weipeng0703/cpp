// 以下为Windows NT下的32位C++程序，请计算sizeof的值
/*
void Func ( char str[100] ) 
{ 
 sizeof( str ) = ?      // 1
} 
void *p = malloc( 100 ); 
sizeof ( p ) = ?        // 2
*/

// 解答
/*
    第一个传入char* 形变量,Func ( char str[100] )函数中数组名作为函数形参时，
    在函数体内，数组名失去了本身的内涵，仅仅只是一个指针；
    在失去其内涵的同时，它还失去了其常量特性，可以作自增、自减等操作，可以被修改。 

    第二个p为指针,所以指针变量在32位下,大小为4
*/

// 知识点
/*
数组名的本质如下：  
（1）数组名指代一种数据结构，这种数据结构就是数组, 它的大小即为数组所分配空间的大小；  
例如：  
    char str[10];
    cout ＜＜ sizeof(str) ＜＜ endl;
输出结果为10，str指代数据结构char[10]。  
（2）数组名可以转换为指向其指代实体的指针，而且是一个 "指针常量"，不能作自增、自减等操作，不能被修改；  
char str[10];   
str++; //编译出错，提示str不是左值 
（3）数组名作为 函数形参 时，沦为 "普通指针"。
在失去其内涵的同时，它还失去了其常量特性，可以作自增、自减等操作，可以被修改。
Windows NT 32位平台下，指针的长度（占用内存的大小）为4字节，故sizeof( str ) 、sizeof ( p ) 都为4。 
*/
