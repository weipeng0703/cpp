// 题目
/*
RTTI 
*/

// 解答
/*
概念：
    RTTI(Run Time Type Identification)即通过运行时类型识别，
    程序能够使用基类的指针或引用来检查这些指针或引用所指的对象的实际派生类型。

产生原因：
    和很多其他语言一样，C++是一种静态类型语言。其数据类型是在编译期就确定的，不能在运行时更改。
    然而由于面向对象程序设计中多态性的要求，C++中的指针或引用(Reference)本身的类型，
    可能与它实际代表(指向或引用)的类型并不一致。
    有时我们需要将一个多态指针转换为其实际指向对象的类型，就需要知道运行时的类型信息，这就产生了运行时类型识别的要求。
    和Java相比，C++要想获得运行时类型信息，只能通过RTTI机制，并且C++最终生成的代码是直接与机器相关的。

    Java中任何一个类都可以通过反射机制来获取类的基本信息（接口、父类、方法、属性、Annotation等），
    而且Java中还提供了一个关键字，可以在运行时判断一个类是不是另一个类的子类或者是该类的对象，
    Java可以生成字节码文件，再由JVM（Java虚拟机）加载运行，字节码文件中可以含有类的信息。

具体方式：
    RTTI提供了两个非常有用的操作符：typeid和dynamic_cast。

    typeid操作符，返回指针和引用所指的实际类型；
        使用typeid(a).name()确定变量a的类型。typeid()函数的返回类型为typeinfo类型的引用。

    dynamic_cast操作符，将基类类型的指针或引用安全地转换为其派生类类型的指针或引用。

*/

